#include "ThingSpeak.h"  //official ThingSpeak library
//#include "secrets.h"
#include <ESP8266WiFi.h> // ESP8266 Wi-Fi MODULE LIBRARY



#define SECRET_SSID "MySSID"    // replace MySSID with your Wi-Fi network name
#define SECRET_PASS "MyPassword"  // replace MyPassword with your Wi-Fi password

#define SECRET_CH_ID 0000000    // replace 0000000 with your channel number
#define SECRET_WRITE_APIKEY "XYZ"   // replace XYZ with your channel write API Key




char ssid[] = SECRET_SSID;   // your network SSID (name)
char pass[] = SECRET_PASS;   // your network password
int keyIndex = 0;            // your network key Index number (needed only for WEP)
WiFiClient  client;
long int entry = 0;
unsigned long myChannelNumber = SECRET_CH_ID;
const char * myWriteAPIKey = SECRET_WRITE_APIKEY;



// Initialize our values

String myStatus = "";

void setup() {
  Serial.begin(115200);  // Initialize serial
  delay(10);
  
  WiFi.mode(WIFI_STA);
  ThingSpeak.begin(client);  // Initialize ThingSpeak
}

//setup() function is called when a sketch starts. Use it to initialize variables, pin modes etc. It will only run once after each powerup or reset of the Arduino.
//serial.begin(speed) sets the data rate in bits per second (baud) for serial data transmission like communicating with serial monitor.
//delay(xx) replace xx by a number, it pauses the program for the amount of time in milliseconds.
//WiFi.mode(WIFI_STA)  devices that connect to Wi-Fi networks are called stations (STA). This mode is used to get the ESP module connected to a Wi-Fi network established by an access point.

void loop() {




  // Connect or reconnect to Wi-Fi
  if (WiFi.status() != WL_CONNECTED) {
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(SECRET_SSID);
    while (WiFi.status() != WL_CONNECTED) {
      WiFi.begin(ssid, pass);  // Connect to WPA/WPA2 network. Change this line if using open or WEP network
      Serial.print(".");
      delay(5000);
    }
    Serial.println("\nConnected.");
  }
// loop() is a function in which the code inside the curly bracket runs over and over as long as the maker board is on.
//WiFi.Status() returns the connection status,  WL_CONNECTED is assigned when connected to a Wi-Fi network.
//Serial.print prints data to the serial porta as human readable ASCII text.
//WIFI.begin(SSID,PASS) initializes the WiFi libraryâ€™s network settings and provides the current status.
//[Here ESP module connects to wifi network.] 


float gas=analogRead(A0); //reading the gas values from mq2 gas sensor

  // set the fields with the values
  ThingSpeak.setField(3, gas);

  Serial.print("Gas Levels: ");
  Serial.print(gas);
  Serial.print("% ");


  // figure out the status message

  myStatus = String("Gas Values");
  // set the status which will be visible on the ThingSpeak website interface.
  ThingSpeak.setStatus(myStatus);


  // write to the ThingSpeak channel
  int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
  if (x == 200) {
    Serial.println("Channel update successful.");
    entry += 1;        //each entry is registered on the website
    Serial.print("Entry No:");
    Serial.println(entry);


  }
  else {
    Serial.println("Problem updating channel. HTTP error code " + String(x));
  }


  delay(25000); // Wait 25 seconds to update the channel again
//ThingSpeak server sends the value 200 through its channel to the Wi-Fi module if it has received the updates for each entries or else error code is sent 

}
